{"title":"Fitting a Multi-Species Spatial Occupancy Model","markdown":{"yaml":{"title":"Fitting a Multi-Species Spatial Occupancy Model","subtitle":"Using Llanganates subset of the WCS camera trap dataset","lightbox":true,"author":[{"name":"German Forero","orcid":"https://orcid.org/0000-0001-9952-7221"},{"name":"Galo Zapara-Rios","orcid":"https://orcid.org/0000-0003-3508-5078"},{"name":"Diego J. Lizcano","orcid":"https://orcid.org/0000-0002-9648-0576"}],"toc":true,"format":{"html":{"code-fold":true,"code-block-bg":true,"code-block-border-left":"#31BAE9"}},"license":"CC BY-SA","date":"2025-05-15","execute":{"freeze":true},"citation":true,"google-scholar":true,"bibliography":"grateful-refs.bib","bibliographystyle":"https://www.zotero.org/styles/tapir-conservation","categories":["model","code","analysis"],"image":"image.png"},"headingText":"Multi-species occupancy model using spOccupancy","containsRefs":false,"markdown":"\n\n\n```{r}\n#| echo: true\n#| code-fold: true\n#| warning: false\n#| message: false\n#| \nlibrary(grateful)\nlibrary(readxl)\nlibrary(DT)\nlibrary(sf)\nlibrary(mapview)\nlibrary(maps)\nlibrary(tmap)\nlibrary(terra)\nlibrary(elevatr)\nlibrary(spOccupancy)\nlibrary(bayesplot)\n#library(ggmcmc)\n\nlibrary(tidyverse)\n\n```\n\n## Fitting a Multi-Species Spatial Occupancy Model\n\n### Llanganates data\n\n```{r}\n\nsource(\"C:/CodigoR/WCS-CameraTrap/R/organiza_datos_v3.R\")\n\nAP_Llanganates <- read_sf(\"C:/CodigoR/Occu_APs/shp/Llanganates/WDPA_WDOECM_May2025_Public_97512_shp-polygons.shp\")\n\n### Ecu 14, Ecu 14  y Ecu 16\n\n# load data\nEcu_14 <- loadproject(\"F:/WCS-CameraTrap/data/BDcorregidas/Ecuador/ECU-014.xlsx\")\nEcu_15 <- loadproject(\"F:/WCS-CameraTrap/data/BDcorregidas/Ecuador/ECU-015.xlsx\")\nEcu_16 <- loadproject(\"F:/WCS-CameraTrap/data/BDcorregidas/Ecuador/ECU-016.xlsx\")\n\n\n\n# get sites\nEcu_14_sites <- get.sites(\"F:/WCS-CameraTrap/data/BDcorregidas/Ecuador/ECU-014.xlsx\")\nEcu_15_sites <- get.sites(\"F:/WCS-CameraTrap/data/BDcorregidas/Ecuador/ECU-015.xlsx\")\nEcu_16_sites <- get.sites(\"F:/WCS-CameraTrap/data/BDcorregidas/Ecuador/ECU-016.xlsx\")\n\n\n\n\n# get elevation map\nelevation_14 <- rast(get_elev_raster(Ecu_14_sites, z = 7)) #z =1-14\nbb <-  st_as_sfc(st_bbox(elevation_14)) # make bounding box \n\n\n\n\n# extract covs using points and add to _sites\ncovs_Ecu_14_sites <- cbind(Ecu_14_sites, terra::extract(elevation_14, Ecu_14_sites))\n\ncovs_Ecu_15_sites <- cbind(Ecu_15_sites, terra::extract(elevation_14, Ecu_15_sites))\n\ncovs_Ecu_16_sites <- cbind(Ecu_16_sites, terra::extract(elevation_14, Ecu_16_sites))\n\n# get which are in and out\ncovs_Ecu_14_sites$in_AP = st_intersects(covs_Ecu_14_sites, AP_Llanganates, sparse = FALSE)\n\ncovs_Ecu_15_sites$in_AP = st_intersects(covs_Ecu_15_sites, AP_Llanganates, sparse = FALSE)\n\ncovs_Ecu_16_sites$in_AP = st_intersects(covs_Ecu_16_sites, AP_Llanganates, sparse = FALSE)\n\n\n\n# make a map\nmapview (elevation_14, alpha=0.5) + \n  mapview (AP_Llanganates, color = \"green\", col.regions = \"green\", alpha = 0.5) +\n  mapview (covs_Ecu_14_sites, zcol = \"in_AP\", col.regions =c(\"red\",\"blue\"), burst = TRUE) +\n  mapview (covs_Ecu_15_sites, zcol = \"in_AP\", burst = TRUE, col.regions = c(\"blue\") )+\n  mapview (covs_Ecu_16_sites, zcol = \"in_AP\", burst = TRUE, col.regions =c(\"red\",\"blue\")) \n  \n\n\n```\n\n### Detection history\n\n```{r}\n\n# check duplicateds in sites\nind1 <- as.vector(which(table(Ecu_15_sites$Point)>=2))# duplicated\nind <- which(Ecu_15_sites$Point==ind1)# match\nEcu_15_sites <- Ecu_15_sites[-ind,]# remove\n\n\n\nEcu_14_historias <- wcs.det_history.creator(data=Ecu_14)\n# sp_number <- which(names(Ecu_14_historias)==\"Tremarctos ornatus\")\nEcu_15_historias <- wcs.det_history.creator(data=Ecu_15)\n# sp_number <- which(names(Ecu_14_historias)==\"Tremarctos ornatus\")\nEcu_16_historias <- wcs.det_history.creator(data=Ecu_16)\n# sp_number <- which(names(Ecu_14_historias)==\"Tremarctos ornatus\")\n\n\n\n# make data frame for each\nlibrary (plyr)\nEcu_14_df <- ldply (Ecu_14_historias)\nEcu_14_df$site <- paste(\"Ecu_14\", 1:29, sep=\"_\")#sites\nEcu_14_df$lat <- rep(as.data.frame(st_coordinates(Ecu_14_sites))[,\"Y\"], 25) #sp\nEcu_14_df$lon <- as.data.frame(st_coordinates(Ecu_14_sites))[,\"X\"]\n\n\nEcu_15_df <- ldply (Ecu_15_historias)\nEcu_15_df$site <- paste(\"Ecu_15\", 1:30, sep=\"_\")#site\nEcu_15_df$lat <- rep(as.data.frame(st_coordinates(Ecu_15_sites))[,\"Y\"], 13) #sp\nEcu_15_df$lon <- as.data.frame(st_coordinates(Ecu_15_sites))[,\"X\"]\n\n\nEcu_16_df <- ldply (Ecu_16_historias)\nEcu_16_df$site <- paste(\"Ecu_16\", 1:28, sep=\"_\")#site\nEcu_16_df$lat <- rep(as.data.frame(st_coordinates(Ecu_16_sites))[,\"Y\"], 16) #sp\nEcu_16_df$lon <- as.data.frame(st_coordinates(Ecu_16_sites))[,\"X\"]\n\n\n# rbind cuted by por 45 dias de muestreo\nEcu_14_15_16 <- rbind(Ecu_14_df[,-(47:52)],\n                      Ecu_15_df[,-(47:54)],\n                      Ecu_16_df[,-(47:107)])\n\n# remove non species\n# filter(id != 2) # or filter(!id == 2)\nEcu_14_15_16 <- Ecu_14_15_16 |> \n                  filter(.id != \"Set up\" ) |> \n                  filter(.id != \"Blank\" )  |> \n                  filter(.id != \"Unknown\" )\n\n\n####################\n# Make empty array\n####################\n# Species codes.\nsp.codes <- sort(unique(Ecu_14_15_16$.id))\n# Plot (site) codes.\nplot.codes <- sort(unique(Ecu_14_15_16$site))\n# Number of species\nN <- length(sp.codes) #total sp\n# Maximum number of replicates at a site\nK <- 45\n# Number of sites\nJ <- length(unique(Ecu_14_15_16$site))\n# Array for detection-nondetection data. \ny <- array(NA, dim = c(N, J, K))\n# Label the dimensions of y (not necessary, but helpful)\ndimnames(y)[[1]] <- sp.codes\ndimnames(y)[[2]] <- plot.codes\n# Look at the structure of our array y\nstr(y)\n\n########### feed the empty array\nfor (j in 1:J) { # Loop through sites.\n  for (k in 1:K) { # Loop through replicates at each site.\n    # Extract data for current site/replicate combination.\n    curr.df <- Ecu_14_15_16 %>%\n      filter(site == plot.codes[j])\n    # Check if more than one date for a given replicate\n    #if (n_distinct(curr.df$Date) > 1) {\n      # If there is more than 1 date, only use the data\n      # from the first date.\n    #  curr.dates <- unique(sort(curr.df$Date))\n    #  curr.df <- curr.df %>% \n     #   filter(Date == curr.dates[1])\n     #}\n    # If plot j was sampled during replicate k, \n    # curr.df will have at least 1 row (i.e., at least \n    # one species will be observed). If not, assume it \n    # was not sampled for that replicate.\n    if (nrow(curr.df) > 0) {\n      # Extract the species that were observed during\n      # this site/replicate.\n      selected.sp <- which(sp.codes %in% curr.df$.id)\n      # Set value to 1 for species that were observed.\n      y[selected.sp, j, k] <- 1\n      # Set value to 0 for all other species.\n      y[-selected.sp, j, k] <- 0\n    }\n  } # k (replicates)\n} # j (sites)\nstr(y)\n\n# Total number of observations for each species\napply(y, 1, sum, na.rm = TRUE)\n\n\n\n\n# Union coordiantes all sites\nfull_sites_14_15_16 <- as.data.frame(cbind(\n  lat=unique(Ecu_14$Latitude), \n  lon=unique(Ecu_14$Longitude) )) |> \n                       rbind(as.data.frame(cbind(\n  lat=unique(Ecu_15$Latitude), \n  lon=unique(Ecu_15$Longitude) )))|> \n            rbind(as.data.frame(cbind(\n  lat=unique(Ecu_16$Latitude), \n  lon=unique(Ecu_16$Longitude) )))\n\n# put name\nfull_sites_14_15_16$site <- unique(Ecu_14_15_16$site)\n# make sf()\nfull_sites_14_15_16_sf = st_as_sf(full_sites_14_15_16, \n                                  coords = c(\"lon\", \"lat\"), \n                                  crs = 4326)\n\n# extract elev\nelev <- terra::extract(elevation_14, full_sites_14_15_16_sf)[,2]\nstr(elev)\n\n# extract in AP\nfull_sites_14_15_16_sf$in_AP = st_intersects(full_sites_14_15_16_sf, AP_Llanganates, sparse = FALSE)\n\nin_AP <- as.numeric(as.vector(st_drop_geometry(full_sites_14_15_16_sf$in_AP)))\n\n# mapview(full_sites_14_15_16_sf, zcol = \"in_AP\", burst = TRUE)\n\n# Transform coord to UTM Z17 Ecuador EPSG:32717 WGS 84 / UTM zone 17S\n\nfull_sites_14_15_16_sf_UTM <- st_transform(full_sites_14_15_16_sf, \"EPSG:32717\")\n\ncoords <- st_coordinates(full_sites_14_15_16_sf_UTM)\nstr(coords)\n\n# make Ecu_14_15_16 an sf object\n#    cam_sf <- st_as_sf(Ecu_14_15_16, coords = c(\"lon\",\"lat\"))   #crs=\"EPSG:4326\")\n    #--- set CRS ---#\n#    st_crs(cam_sf) <- 4326\n\n#transform llanganates to UTM\nAP_Llanganates_UTM <- st_transform(AP_Llanganates, \"EPSG:32717\")\n# Convert to LINESTRING\nAP_Llanganates_UTM_line <- st_cast(AP_Llanganates_UTM, \"LINESTRING\")\n\n# Calculate the distance\n#multiplic <- full_sites_14_15_16_sf_UTM |> mutate(multiplic= as.numeric(in_AP)) \nmultiplic=ifelse(full_sites_14_15_16_sf_UTM$in_AP==\"TRUE\",-1,1)\nborder_dist <- st_distance(full_sites_14_15_16_sf_UTM, AP_Llanganates_UTM_line) * multiplic \n# print(border_dist)\n\n\n\n                    \n\n```\n\n### pack in object\n\n```{r}\n# Detection-nondetection data ---------\n# Species of interest, can select individually\n# curr.sp <- sort(unique(Ecu_14_15_16$.id))# c('BAWW', 'BLJA', 'GCFL')\nselected.sp <-  c(\"Canis familiaris\", \n              \"Cuniculus paca\",\n              \"Cuniculus taczanowskii\",\n              \"Dasyprocta fuliginosa\",\n              \"Eira barbara\",\n              \"Herpailurus yagouaroundi\",\n              \"Mazama murelia\",\n              \"Mazama rufina\",\n              \"Mazama zamora\",\n              \"Nasuella olivacea\",\n              \"Odocoileus ustus\",\n              \"Pecari tajacu\",\n              \"Pseudalopex culpaeus\",\n              \"Pudu mephistophiles\",\n              \"Puma concolor\",\n              \"Tapirus pinchaque\",\n              \"Tayassu pecari\",\n              \"Tremarctos ornatus\")\n\ny.msom <- y[which(sp.codes %in% selected.sp), , ]\nstr(y.msom)\n\n# Number of species\nN <- length(selected.sp) # number of selectes sp\n\n# Distances between sites\ndist.hbef <- dist(coords)\n\n# Detection covariates ----------------\n# det.covs <- list(day = hb.day, \n#                 tod = hb.tod)\n# str(det.covs)\n\n# Occurrence covariates ---------------\nocc.covs <- data.frame(elev,  border_dist) # as.factor(in_AP),\n\nnames(occ.covs) <- c(\"elev\",\"border_dist\")# \"in_AP\",\nstr(occ.covs)\n\n\n# pack all\n\n# Package all data into list object\ndata.msom <- list(y = y.msom, \n                  occ.covs = occ.covs, \n                  #det.covs = det.covs, \n                  coords = coords)\n\n#### Inits\nms.inits <- list(alpha.comm = 0, \n                 beta.comm = 0, \n                 beta = 0, \n                 alpha = 0,\n                 tau.sq.beta = 1, \n                 tau.sq.alpha = 1, \n                 z = apply(y.msom, c(1, 2), max, na.rm = TRUE), \n                 sigma.sq = 2, \n                 phi = 3 / mean(dist.hbef), \n                 w = matrix(0, N, dim(y.msom)[2])\n                 )\n\n# priors\n# Minimum value is 0, so need to grab second element.\nmin.dist <- sort(unique(dist.hbef))[2]\nmax.dist <- max(dist.hbef)\nms.priors <- list(beta.comm.normal = list(mean = 0, var = 2.72),\n                  alpha.comm.normal = list(mean = 0, var = 2.72), \n                  tau.sq.beta.ig = list(a = 0.1, b = 0.1), \n                  tau.sq.alpha.ig = list(a = 0.1, b = 0.1),\n                  sigma.sq.ig = list(a = 2, b = 2), \n                  phi.unif = list(a = 3 / max.dist, b = 3 / min.dist))\n\n\n# Thus, the total number of MCMC samples is n.batch * batch.length. Typically, we set batch.length = 25 and then play around with n.batch until convergence is reached. Here we set n.batch = 800 for a total of 20000 MCMC samples.\n\n# We next set the parameters controlling the Adaptive MCMC algorithm\nbatch.length <- 25\nn.batch <- 4000 #800  #1000*25=25.000\nn.burn <- 1000\nn.thin <- 50\nn.chains <- 3\nms.tuning <- list(phi = 0.25)\nn.omp.threads <- 3 # procesadores\n# Values for reporting\nverbose <- TRUE\nn.report <- 100\n\n\n\nout.msom <- spMsPGOcc(occ.formula = ~ \n                        scale(elev) + \n                        I(scale(elev)^2) + \n                        scale(border_dist) , \n                      det.formula = ~1,# ~ scale(day) + I(scale(day)^2) + scale(tod), \n                      data = data.msom,\n                      inits = ms.inits,\n                      n.burn = n.burn,\n                      n.batch = n.batch, \n                      batch.length = batch.length, \n                      accept.rate = 0.43,\n                      priors = ms.priors,\n                      n.omp.threads = n.omp.threads,\n                      n.chains = n.chains,\n                      cov.model = 'exponential', \n                      tuning = ms.tuning, \n                      NNGP = TRUE, \n                      verbose = TRUE,\n                      n.report = n.report,\n                      n.neighbors = 5, \n                      n.thin = n.thin\n                      \n                      ) \n\nsummary(out.msom, level = 'both')#level = 'community')\n\n\n\n```\n\nHere we should see all Rhat values are less than 1.1 and the ESS values indicating adequate mixing of the MCMC chains.\n\n### Posterior predictive checks\n\nWe generate a Bayesian p-value as a quick assessment of model fit. A Bayesian p-value that hovers around 0.5 indicates adequate model fit, while values less than 0.1 or greater than 0.9 suggest our model does not fit the data well.\n\n```{r}\n# Posterior predictive checks\n# Approx. run time: 20 sec\n# ppc.ms.out <- ppcOcc(out.msom, 'chi-squared', group = 1)\n# summary(ppc.ms.out)\n\n# Takes a few seconds to run.\nppc.sp.ms.out <- ppcOcc(out.msom, 'freeman-tukey', group = 2)\nsummary(ppc.sp.ms.out, level = 'both')\n\n\n```\n\n### Effect plots\n\n```{r}\n### plots\n# plot(out.msom, 'alpha', density = FALSE) # Detection parameters.\n# mcmc_intervals(out$alpha.comm.samples)\n# mcmc_intervals(out$alpha.samples)\n\n# plot(out.msom, 'beta', density = TRUE) # Occupancy parameters.\nmcmc_intervals(out.msom$beta.comm.samples)\nmcmc_intervals(out.msom$beta.samples)\n\n\n\n\n\n# occupancy per selected species\nmcmc_areas(out.msom$beta.samples, \n  pars = c(\"scale(border_dist)-Tapirus pinchaque\", \"scale(border_dist)-Cuniculus paca\", \"scale(border_dist)-Mazama rufina\", \"scale(border_dist)-Puma concolor\", \"scale(border_dist)-Canis familiaris\"))\n\n# Full set species\nmcmc_areas(out.msom$beta.samples, \n  pars = paste(\"scale(elev)\", selected.sp, sep=\"-\" ))\n\n# Full set species\nmcmc_areas(out.msom$beta.samples, \n  pars = paste(\"I(scale(elev)^2)\", selected.sp, sep=\"-\" ))\n\n# Full set species\nmcmc_areas(out.msom$beta.samples, \n  pars = paste(\"scale(border_dist)\", selected.sp, sep=\"-\" ))\n\n\n\n```\n\n### Model selection using WAIC and k-fold cross-validation\n\n```{r}\nwaicOcc(out.ms) # full comunity\nwaicOcc(out.ms, by.sp = TRUE) # by sp\n```\n\n### Prediction\n\nPrediction with spMsPGOcc objects again uses the predict() function given a set of covariates and spatial coordinates of a set of locations. Results are very similar to the nonspatial multi-species model.\n\nto slow....\n\n```{r}\n#| echo: false\n#| eval: false\n\n# Transform to UTM\nelevation_14_UTM <- project(elevation_14, \"EPSG:32717\")\n\n## S4 method for signature 'SpatRaster'\nllangaElev <- as.data.frame(elevation_14_UTM, \n                            row.names=NULL, \n                            xy=TRUE, \n                            cells=FALSE, \n                            time=FALSE)\n\nelev.pred <- (llangaElev[,3] - mean(elev)) / sd(elev)\nX.0 <- cbind(1, elev.pred)#, elev.pred^2) # here all covs\ncoords.0 <- as.matrix(llangaElev[, c('x', 'y')]) #x and y\nout.sp.ms.pred <- predict(out.msom, X.0, coords.0)\n```\n\n## Package Citation\n\n```{r}\n#| code-fold: true\npkgs <- cite_packages(output = \"paragraph\", pkgs=\"Session\", out.dir = \".\")\n# knitr::kable(pkgs)\npkgs\n```\n\n## Sesion info\n\n::: {.callout-note collapse=\"true\"}\n```{r}\nprint(sessionInfo(), locale = FALSE)\n```\n:::\n","srcMarkdownNoYaml":"\n\n## Multi-species occupancy model using spOccupancy\n\n```{r}\n#| echo: true\n#| code-fold: true\n#| warning: false\n#| message: false\n#| \nlibrary(grateful)\nlibrary(readxl)\nlibrary(DT)\nlibrary(sf)\nlibrary(mapview)\nlibrary(maps)\nlibrary(tmap)\nlibrary(terra)\nlibrary(elevatr)\nlibrary(spOccupancy)\nlibrary(bayesplot)\n#library(ggmcmc)\n\nlibrary(tidyverse)\n\n```\n\n## Fitting a Multi-Species Spatial Occupancy Model\n\n### Llanganates data\n\n```{r}\n\nsource(\"C:/CodigoR/WCS-CameraTrap/R/organiza_datos_v3.R\")\n\nAP_Llanganates <- read_sf(\"C:/CodigoR/Occu_APs/shp/Llanganates/WDPA_WDOECM_May2025_Public_97512_shp-polygons.shp\")\n\n### Ecu 14, Ecu 14  y Ecu 16\n\n# load data\nEcu_14 <- loadproject(\"F:/WCS-CameraTrap/data/BDcorregidas/Ecuador/ECU-014.xlsx\")\nEcu_15 <- loadproject(\"F:/WCS-CameraTrap/data/BDcorregidas/Ecuador/ECU-015.xlsx\")\nEcu_16 <- loadproject(\"F:/WCS-CameraTrap/data/BDcorregidas/Ecuador/ECU-016.xlsx\")\n\n\n\n# get sites\nEcu_14_sites <- get.sites(\"F:/WCS-CameraTrap/data/BDcorregidas/Ecuador/ECU-014.xlsx\")\nEcu_15_sites <- get.sites(\"F:/WCS-CameraTrap/data/BDcorregidas/Ecuador/ECU-015.xlsx\")\nEcu_16_sites <- get.sites(\"F:/WCS-CameraTrap/data/BDcorregidas/Ecuador/ECU-016.xlsx\")\n\n\n\n\n# get elevation map\nelevation_14 <- rast(get_elev_raster(Ecu_14_sites, z = 7)) #z =1-14\nbb <-  st_as_sfc(st_bbox(elevation_14)) # make bounding box \n\n\n\n\n# extract covs using points and add to _sites\ncovs_Ecu_14_sites <- cbind(Ecu_14_sites, terra::extract(elevation_14, Ecu_14_sites))\n\ncovs_Ecu_15_sites <- cbind(Ecu_15_sites, terra::extract(elevation_14, Ecu_15_sites))\n\ncovs_Ecu_16_sites <- cbind(Ecu_16_sites, terra::extract(elevation_14, Ecu_16_sites))\n\n# get which are in and out\ncovs_Ecu_14_sites$in_AP = st_intersects(covs_Ecu_14_sites, AP_Llanganates, sparse = FALSE)\n\ncovs_Ecu_15_sites$in_AP = st_intersects(covs_Ecu_15_sites, AP_Llanganates, sparse = FALSE)\n\ncovs_Ecu_16_sites$in_AP = st_intersects(covs_Ecu_16_sites, AP_Llanganates, sparse = FALSE)\n\n\n\n# make a map\nmapview (elevation_14, alpha=0.5) + \n  mapview (AP_Llanganates, color = \"green\", col.regions = \"green\", alpha = 0.5) +\n  mapview (covs_Ecu_14_sites, zcol = \"in_AP\", col.regions =c(\"red\",\"blue\"), burst = TRUE) +\n  mapview (covs_Ecu_15_sites, zcol = \"in_AP\", burst = TRUE, col.regions = c(\"blue\") )+\n  mapview (covs_Ecu_16_sites, zcol = \"in_AP\", burst = TRUE, col.regions =c(\"red\",\"blue\")) \n  \n\n\n```\n\n### Detection history\n\n```{r}\n\n# check duplicateds in sites\nind1 <- as.vector(which(table(Ecu_15_sites$Point)>=2))# duplicated\nind <- which(Ecu_15_sites$Point==ind1)# match\nEcu_15_sites <- Ecu_15_sites[-ind,]# remove\n\n\n\nEcu_14_historias <- wcs.det_history.creator(data=Ecu_14)\n# sp_number <- which(names(Ecu_14_historias)==\"Tremarctos ornatus\")\nEcu_15_historias <- wcs.det_history.creator(data=Ecu_15)\n# sp_number <- which(names(Ecu_14_historias)==\"Tremarctos ornatus\")\nEcu_16_historias <- wcs.det_history.creator(data=Ecu_16)\n# sp_number <- which(names(Ecu_14_historias)==\"Tremarctos ornatus\")\n\n\n\n# make data frame for each\nlibrary (plyr)\nEcu_14_df <- ldply (Ecu_14_historias)\nEcu_14_df$site <- paste(\"Ecu_14\", 1:29, sep=\"_\")#sites\nEcu_14_df$lat <- rep(as.data.frame(st_coordinates(Ecu_14_sites))[,\"Y\"], 25) #sp\nEcu_14_df$lon <- as.data.frame(st_coordinates(Ecu_14_sites))[,\"X\"]\n\n\nEcu_15_df <- ldply (Ecu_15_historias)\nEcu_15_df$site <- paste(\"Ecu_15\", 1:30, sep=\"_\")#site\nEcu_15_df$lat <- rep(as.data.frame(st_coordinates(Ecu_15_sites))[,\"Y\"], 13) #sp\nEcu_15_df$lon <- as.data.frame(st_coordinates(Ecu_15_sites))[,\"X\"]\n\n\nEcu_16_df <- ldply (Ecu_16_historias)\nEcu_16_df$site <- paste(\"Ecu_16\", 1:28, sep=\"_\")#site\nEcu_16_df$lat <- rep(as.data.frame(st_coordinates(Ecu_16_sites))[,\"Y\"], 16) #sp\nEcu_16_df$lon <- as.data.frame(st_coordinates(Ecu_16_sites))[,\"X\"]\n\n\n# rbind cuted by por 45 dias de muestreo\nEcu_14_15_16 <- rbind(Ecu_14_df[,-(47:52)],\n                      Ecu_15_df[,-(47:54)],\n                      Ecu_16_df[,-(47:107)])\n\n# remove non species\n# filter(id != 2) # or filter(!id == 2)\nEcu_14_15_16 <- Ecu_14_15_16 |> \n                  filter(.id != \"Set up\" ) |> \n                  filter(.id != \"Blank\" )  |> \n                  filter(.id != \"Unknown\" )\n\n\n####################\n# Make empty array\n####################\n# Species codes.\nsp.codes <- sort(unique(Ecu_14_15_16$.id))\n# Plot (site) codes.\nplot.codes <- sort(unique(Ecu_14_15_16$site))\n# Number of species\nN <- length(sp.codes) #total sp\n# Maximum number of replicates at a site\nK <- 45\n# Number of sites\nJ <- length(unique(Ecu_14_15_16$site))\n# Array for detection-nondetection data. \ny <- array(NA, dim = c(N, J, K))\n# Label the dimensions of y (not necessary, but helpful)\ndimnames(y)[[1]] <- sp.codes\ndimnames(y)[[2]] <- plot.codes\n# Look at the structure of our array y\nstr(y)\n\n########### feed the empty array\nfor (j in 1:J) { # Loop through sites.\n  for (k in 1:K) { # Loop through replicates at each site.\n    # Extract data for current site/replicate combination.\n    curr.df <- Ecu_14_15_16 %>%\n      filter(site == plot.codes[j])\n    # Check if more than one date for a given replicate\n    #if (n_distinct(curr.df$Date) > 1) {\n      # If there is more than 1 date, only use the data\n      # from the first date.\n    #  curr.dates <- unique(sort(curr.df$Date))\n    #  curr.df <- curr.df %>% \n     #   filter(Date == curr.dates[1])\n     #}\n    # If plot j was sampled during replicate k, \n    # curr.df will have at least 1 row (i.e., at least \n    # one species will be observed). If not, assume it \n    # was not sampled for that replicate.\n    if (nrow(curr.df) > 0) {\n      # Extract the species that were observed during\n      # this site/replicate.\n      selected.sp <- which(sp.codes %in% curr.df$.id)\n      # Set value to 1 for species that were observed.\n      y[selected.sp, j, k] <- 1\n      # Set value to 0 for all other species.\n      y[-selected.sp, j, k] <- 0\n    }\n  } # k (replicates)\n} # j (sites)\nstr(y)\n\n# Total number of observations for each species\napply(y, 1, sum, na.rm = TRUE)\n\n\n\n\n# Union coordiantes all sites\nfull_sites_14_15_16 <- as.data.frame(cbind(\n  lat=unique(Ecu_14$Latitude), \n  lon=unique(Ecu_14$Longitude) )) |> \n                       rbind(as.data.frame(cbind(\n  lat=unique(Ecu_15$Latitude), \n  lon=unique(Ecu_15$Longitude) )))|> \n            rbind(as.data.frame(cbind(\n  lat=unique(Ecu_16$Latitude), \n  lon=unique(Ecu_16$Longitude) )))\n\n# put name\nfull_sites_14_15_16$site <- unique(Ecu_14_15_16$site)\n# make sf()\nfull_sites_14_15_16_sf = st_as_sf(full_sites_14_15_16, \n                                  coords = c(\"lon\", \"lat\"), \n                                  crs = 4326)\n\n# extract elev\nelev <- terra::extract(elevation_14, full_sites_14_15_16_sf)[,2]\nstr(elev)\n\n# extract in AP\nfull_sites_14_15_16_sf$in_AP = st_intersects(full_sites_14_15_16_sf, AP_Llanganates, sparse = FALSE)\n\nin_AP <- as.numeric(as.vector(st_drop_geometry(full_sites_14_15_16_sf$in_AP)))\n\n# mapview(full_sites_14_15_16_sf, zcol = \"in_AP\", burst = TRUE)\n\n# Transform coord to UTM Z17 Ecuador EPSG:32717 WGS 84 / UTM zone 17S\n\nfull_sites_14_15_16_sf_UTM <- st_transform(full_sites_14_15_16_sf, \"EPSG:32717\")\n\ncoords <- st_coordinates(full_sites_14_15_16_sf_UTM)\nstr(coords)\n\n# make Ecu_14_15_16 an sf object\n#    cam_sf <- st_as_sf(Ecu_14_15_16, coords = c(\"lon\",\"lat\"))   #crs=\"EPSG:4326\")\n    #--- set CRS ---#\n#    st_crs(cam_sf) <- 4326\n\n#transform llanganates to UTM\nAP_Llanganates_UTM <- st_transform(AP_Llanganates, \"EPSG:32717\")\n# Convert to LINESTRING\nAP_Llanganates_UTM_line <- st_cast(AP_Llanganates_UTM, \"LINESTRING\")\n\n# Calculate the distance\n#multiplic <- full_sites_14_15_16_sf_UTM |> mutate(multiplic= as.numeric(in_AP)) \nmultiplic=ifelse(full_sites_14_15_16_sf_UTM$in_AP==\"TRUE\",-1,1)\nborder_dist <- st_distance(full_sites_14_15_16_sf_UTM, AP_Llanganates_UTM_line) * multiplic \n# print(border_dist)\n\n\n\n                    \n\n```\n\n### pack in object\n\n```{r}\n# Detection-nondetection data ---------\n# Species of interest, can select individually\n# curr.sp <- sort(unique(Ecu_14_15_16$.id))# c('BAWW', 'BLJA', 'GCFL')\nselected.sp <-  c(\"Canis familiaris\", \n              \"Cuniculus paca\",\n              \"Cuniculus taczanowskii\",\n              \"Dasyprocta fuliginosa\",\n              \"Eira barbara\",\n              \"Herpailurus yagouaroundi\",\n              \"Mazama murelia\",\n              \"Mazama rufina\",\n              \"Mazama zamora\",\n              \"Nasuella olivacea\",\n              \"Odocoileus ustus\",\n              \"Pecari tajacu\",\n              \"Pseudalopex culpaeus\",\n              \"Pudu mephistophiles\",\n              \"Puma concolor\",\n              \"Tapirus pinchaque\",\n              \"Tayassu pecari\",\n              \"Tremarctos ornatus\")\n\ny.msom <- y[which(sp.codes %in% selected.sp), , ]\nstr(y.msom)\n\n# Number of species\nN <- length(selected.sp) # number of selectes sp\n\n# Distances between sites\ndist.hbef <- dist(coords)\n\n# Detection covariates ----------------\n# det.covs <- list(day = hb.day, \n#                 tod = hb.tod)\n# str(det.covs)\n\n# Occurrence covariates ---------------\nocc.covs <- data.frame(elev,  border_dist) # as.factor(in_AP),\n\nnames(occ.covs) <- c(\"elev\",\"border_dist\")# \"in_AP\",\nstr(occ.covs)\n\n\n# pack all\n\n# Package all data into list object\ndata.msom <- list(y = y.msom, \n                  occ.covs = occ.covs, \n                  #det.covs = det.covs, \n                  coords = coords)\n\n#### Inits\nms.inits <- list(alpha.comm = 0, \n                 beta.comm = 0, \n                 beta = 0, \n                 alpha = 0,\n                 tau.sq.beta = 1, \n                 tau.sq.alpha = 1, \n                 z = apply(y.msom, c(1, 2), max, na.rm = TRUE), \n                 sigma.sq = 2, \n                 phi = 3 / mean(dist.hbef), \n                 w = matrix(0, N, dim(y.msom)[2])\n                 )\n\n# priors\n# Minimum value is 0, so need to grab second element.\nmin.dist <- sort(unique(dist.hbef))[2]\nmax.dist <- max(dist.hbef)\nms.priors <- list(beta.comm.normal = list(mean = 0, var = 2.72),\n                  alpha.comm.normal = list(mean = 0, var = 2.72), \n                  tau.sq.beta.ig = list(a = 0.1, b = 0.1), \n                  tau.sq.alpha.ig = list(a = 0.1, b = 0.1),\n                  sigma.sq.ig = list(a = 2, b = 2), \n                  phi.unif = list(a = 3 / max.dist, b = 3 / min.dist))\n\n\n# Thus, the total number of MCMC samples is n.batch * batch.length. Typically, we set batch.length = 25 and then play around with n.batch until convergence is reached. Here we set n.batch = 800 for a total of 20000 MCMC samples.\n\n# We next set the parameters controlling the Adaptive MCMC algorithm\nbatch.length <- 25\nn.batch <- 4000 #800  #1000*25=25.000\nn.burn <- 1000\nn.thin <- 50\nn.chains <- 3\nms.tuning <- list(phi = 0.25)\nn.omp.threads <- 3 # procesadores\n# Values for reporting\nverbose <- TRUE\nn.report <- 100\n\n\n\nout.msom <- spMsPGOcc(occ.formula = ~ \n                        scale(elev) + \n                        I(scale(elev)^2) + \n                        scale(border_dist) , \n                      det.formula = ~1,# ~ scale(day) + I(scale(day)^2) + scale(tod), \n                      data = data.msom,\n                      inits = ms.inits,\n                      n.burn = n.burn,\n                      n.batch = n.batch, \n                      batch.length = batch.length, \n                      accept.rate = 0.43,\n                      priors = ms.priors,\n                      n.omp.threads = n.omp.threads,\n                      n.chains = n.chains,\n                      cov.model = 'exponential', \n                      tuning = ms.tuning, \n                      NNGP = TRUE, \n                      verbose = TRUE,\n                      n.report = n.report,\n                      n.neighbors = 5, \n                      n.thin = n.thin\n                      \n                      ) \n\nsummary(out.msom, level = 'both')#level = 'community')\n\n\n\n```\n\nHere we should see all Rhat values are less than 1.1 and the ESS values indicating adequate mixing of the MCMC chains.\n\n### Posterior predictive checks\n\nWe generate a Bayesian p-value as a quick assessment of model fit. A Bayesian p-value that hovers around 0.5 indicates adequate model fit, while values less than 0.1 or greater than 0.9 suggest our model does not fit the data well.\n\n```{r}\n# Posterior predictive checks\n# Approx. run time: 20 sec\n# ppc.ms.out <- ppcOcc(out.msom, 'chi-squared', group = 1)\n# summary(ppc.ms.out)\n\n# Takes a few seconds to run.\nppc.sp.ms.out <- ppcOcc(out.msom, 'freeman-tukey', group = 2)\nsummary(ppc.sp.ms.out, level = 'both')\n\n\n```\n\n### Effect plots\n\n```{r}\n### plots\n# plot(out.msom, 'alpha', density = FALSE) # Detection parameters.\n# mcmc_intervals(out$alpha.comm.samples)\n# mcmc_intervals(out$alpha.samples)\n\n# plot(out.msom, 'beta', density = TRUE) # Occupancy parameters.\nmcmc_intervals(out.msom$beta.comm.samples)\nmcmc_intervals(out.msom$beta.samples)\n\n\n\n\n\n# occupancy per selected species\nmcmc_areas(out.msom$beta.samples, \n  pars = c(\"scale(border_dist)-Tapirus pinchaque\", \"scale(border_dist)-Cuniculus paca\", \"scale(border_dist)-Mazama rufina\", \"scale(border_dist)-Puma concolor\", \"scale(border_dist)-Canis familiaris\"))\n\n# Full set species\nmcmc_areas(out.msom$beta.samples, \n  pars = paste(\"scale(elev)\", selected.sp, sep=\"-\" ))\n\n# Full set species\nmcmc_areas(out.msom$beta.samples, \n  pars = paste(\"I(scale(elev)^2)\", selected.sp, sep=\"-\" ))\n\n# Full set species\nmcmc_areas(out.msom$beta.samples, \n  pars = paste(\"scale(border_dist)\", selected.sp, sep=\"-\" ))\n\n\n\n```\n\n### Model selection using WAIC and k-fold cross-validation\n\n```{r}\nwaicOcc(out.ms) # full comunity\nwaicOcc(out.ms, by.sp = TRUE) # by sp\n```\n\n### Prediction\n\nPrediction with spMsPGOcc objects again uses the predict() function given a set of covariates and spatial coordinates of a set of locations. Results are very similar to the nonspatial multi-species model.\n\nto slow....\n\n```{r}\n#| echo: false\n#| eval: false\n\n# Transform to UTM\nelevation_14_UTM <- project(elevation_14, \"EPSG:32717\")\n\n## S4 method for signature 'SpatRaster'\nllangaElev <- as.data.frame(elevation_14_UTM, \n                            row.names=NULL, \n                            xy=TRUE, \n                            cells=FALSE, \n                            time=FALSE)\n\nelev.pred <- (llangaElev[,3] - mean(elev)) / sd(elev)\nX.0 <- cbind(1, elev.pred)#, elev.pred^2) # here all covs\ncoords.0 <- as.matrix(llangaElev[, c('x', 'y')]) #x and y\nout.sp.ms.pred <- predict(out.msom, X.0, coords.0)\n```\n\n## Package Citation\n\n```{r}\n#| code-fold: true\npkgs <- cite_packages(output = \"paragraph\", pkgs=\"Session\", out.dir = \".\")\n# knitr::kable(pkgs)\npkgs\n```\n\n## Sesion info\n\n::: {.callout-note collapse=\"true\"}\n```{r}\nprint(sessionInfo(), locale = FALSE)\n```\n:::\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":8,"fig-height":5,"fig-format":"png","fig-dpi":600,"fig-asp":0.618,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"center","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["../../styles.css"],"highlight-style":"arrow","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.46","lightbox":true,"editor":"visual","theme":{"light":"flatly","dark":"darkly"},"code-block-bg":true,"mainfont":"Fira Sans","title-block-banner":true,"title":"Fitting a Multi-Species Spatial Occupancy Model","subtitle":"Using Llanganates subset of the WCS camera trap dataset","author":[{"name":"German Forero","orcid":"https://orcid.org/0000-0001-9952-7221"},{"name":"Galo Zapara-Rios","orcid":"https://orcid.org/0000-0003-3508-5078"},{"name":"Diego J. Lizcano","orcid":"https://orcid.org/0000-0002-9648-0576"}],"license":"CC BY-SA","date":"2025-05-15","citation":true,"google-scholar":true,"bibliography":["grateful-refs.bib"],"bibliographystyle":"https://www.zotero.org/styles/tapir-conservation","categories":["model","code","analysis"],"image":"image.png","code-block-border-left":"#31BAE9"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}