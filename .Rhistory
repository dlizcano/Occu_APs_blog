# Number of sites
J <- length(unique(Ecu_14_15_16$site))
# Array for detection-nondetection data.
y <- array(NA, dim = c(N, J, K))
# Label the dimensions of y (not necessary, but helpful)
dimnames(y)[[1]] <- sp.codes
dimnames(y)[[2]] <- plot.codes
# Look at the structure of our array y
str(y)
K
for (j in 1:J) { # Loop through sites.
for (k in 1:K) { # Loop through replicates at each site.
# Extract data for current site/replicate combination.
curr.df <- Ecu_14_15_16 %>%
filter(Plot == plot.codes[j], Replicate == k)
# Check if more than one date for a given replicate
#if (n_distinct(curr.df$Date) > 1) {
# If there is more than 1 date, only use the data
# from the first date.
#  curr.dates <- unique(sort(curr.df$Date))
#  curr.df <- curr.df %>%
#   filter(Date == curr.dates[1])
#}
# If plot j was sampled during replicate k,
# curr.df will have at least 1 row (i.e., at least
# one species will be observed). If not, assume it
# was not sampled for that replicate.
if (nrow(curr.df) > 0) {
# Extract the species that were observed during
# this site/replicate.
curr.sp <- which(sp.codes %in% curr.df$Species)
# Set value to 1 for species that were observed.
y[curr.sp, j, k] <- 1
# Set value to 0 for all other species.
y[-curr.sp, j, k] <- 0
}
} # k (replicates)
} # j (sites)
i
j
k
j=1
k=1
# Extract data for current site/replicate combination.
curr.df <- Ecu_14_15_16 %>%
filter(Plot == plot.codes[j], Replicate == k)
plot.codes[j]
# Species codes.
sp.codes <- sort(unique(Ecu_14_15_16$.id))
# Plot (site) codes.
plot.codes <- sort(unique(Ecu_14_15_16$site))
# Number of species
N <- length(sp.codes)
# Maximum number of replicates at a site
K <- 45
# Number of sites
J <- length(unique(Ecu_14_15_16$site))
# Array for detection-nondetection data.
y <- array(NA, dim = c(N, J, K))
# Label the dimensions of y (not necessary, but helpful)
dimnames(y)[[1]] <- sp.codes
dimnames(y)[[2]] <- plot.codes
# Look at the structure of our array y
str(y)
plot.codes
curr.df <- Ecu_14_15_16 %>%
filter(Plot == plot.codes[j], Replicate == k)
names(Ecu_14_15_16)
# Extract data for current site/replicate combination.
curr.df <- Ecu_14_15_16 %>%
filter(site == plot.codes[j], Replicate == k)
# Extract the species that were observed during
# this site/replicate.
curr.sp <- which(sp.codes %in% curr.df$Species)
# Extract data for current site/replicate combination.
curr.df <- Ecu_14_15_16 %>%
filter(site == plot.codes[j])
curr.df
# Extract the species that were observed during
# this site/replicate.
curr.sp <- which(sp.codes %in% curr.df$Species)
curr.sp
sp.codes
curr.df$Species
# Extract the species that were observed during
# this site/replicate.
curr.sp <- which(sp.codes %in% curr.df$.id)
curr.sp
# Set value to 1 for species that were observed.
y[curr.sp, j, k] <- 1
# Set value to 0 for all other species.
y[-curr.sp, j, k] <- 0
for (j in 1:J) { # Loop through sites.
for (k in 1:K) { # Loop through replicates at each site.
# Extract data for current site/replicate combination.
curr.df <- Ecu_14_15_16 %>%
filter(site == plot.codes[j])
# Check if more than one date for a given replicate
#if (n_distinct(curr.df$Date) > 1) {
# If there is more than 1 date, only use the data
# from the first date.
#  curr.dates <- unique(sort(curr.df$Date))
#  curr.df <- curr.df %>%
#   filter(Date == curr.dates[1])
#}
# If plot j was sampled during replicate k,
# curr.df will have at least 1 row (i.e., at least
# one species will be observed). If not, assume it
# was not sampled for that replicate.
if (nrow(curr.df) > 0) {
# Extract the species that were observed during
# this site/replicate.
curr.sp <- which(sp.codes %in% curr.df$.id)
# Set value to 1 for species that were observed.
y[curr.sp, j, k] <- 1
# Set value to 0 for all other species.
y[-curr.sp, j, k] <- 0
}
} # k (replicates)
} # j (sites)
str(y)
y
# Total number of observations for each species
apply(y, 1, sum, na.rm = TRUE)
Ecu_16_sites
# format covariate elev
full_sites <- c(Ecu_14_sites, Ecu_15_sites, Ecu_16_sites)
full_sites
# format covariate elev
full_sites <- c(Ecu_14_sites, Ecu_15_sites, Ecu_16_sites)
str(full_sites)
# format covariate elev
full_sites <- list(Ecu_14_sites, Ecu_15_sites, Ecu_16_sites)
str(full_sites)
# Union all sites
full_sites <- st_union (Ecu_14_sites, Ecu_15_sites, Ecu_16_sites)
Ecu_16_sites
# Union all sites
full_sites <- st_union (list(Ecu_14_sites, Ecu_15_sites, Ecu_16_sites))
# Union all sites
full_sites <- st_union(Ecu_14_sites, Ecu_15_sites, Ecu_16_sites)
# Union all sites
full_sites <- sf:st_union(Ecu_14_sites, Ecu_15_sites, Ecu_16_sites)
library(DT)
library(sf)
full_sites <- sf::st_union(Ecu_14_sites, Ecu_15_sites, Ecu_16_sites)
sf::st_union?
sf::st_union
sf::st_union
?sf::st_union
# Union all sites
full_sites <- sf:st_union(Ecu_14_sites, Ecu_15_sites)
# Union all sites
full_sites <- sf::st_union(Ecu_14_sites, Ecu_15_sites)
full_sites_14_15 <- full_sites_14_15 |> sf::st_union(Ecu_16_sites)
# Union all sites
full_sites_14_15 <- sf::st_union(Ecu_14_sites, Ecu_15_sites)
full_sites_14_15 <- full_sites_14_15 |> sf::st_union(Ecu_16_sites)
# Union all sites
full_sites_14_15_16 <- Ecu_14_sites |>
sf::st_union(Ecu_15_sites) |>
sf::st_union(Ecu_16_sites)
?terra::extract
elev <- terra::extract(elevation_14, full_sites_14_15_16)
str(elev)
full_sites_14_15_16
unique(full_sites_14_15_16)
Ecu_14_sites
# Union all sites
full_sites_14_15_16 <- Ecu_14_sites |>
sf::st_union(Ecu_15_sites) |>
sf::st_union(Ecu_16_sites)
full_sites_14_15_16
Ecu_14_sites
Ecu_15_sites
Ecu_16_sites
st_coordinates(Ecu_14_sites)
full_sites_14_15_16 <- st_coordinates(Ecu_14_sites) |>
join(st_coordinates(Ecu_14_sites))
# Union all sites
full_sites_14_15_16 <- st_coordinates(Ecu_14_sites) |>
join(st_coordinates(Ecu_14_sites))|>
join(st_coordinates(Ecu_14_sites))
as.data.frame(st_coordinates(Ecu_14_sites))
# Union all sites
full_sites_14_15_16 <- as.data.frame(st_coordinates(Ecu_14_sites)) |>
as.data.frame(join(st_coordinates(Ecu_14_sites)))|>
as.data.frame(join(st_coordinates(Ecu_14_sites)))
# Union all sites
full_sites_14_15_16 <- as.data.frame(st_coordinates(Ecu_14_sites)) |>
join(as.data.frame(st_coordinates(Ecu_14_sites)))|>
join(as.data.frame(st_coordinates(Ecu_14_sites)))
full_sites_14_15_16
full_sites_14_15_16 <- as.data.frame(st_coordinates(Ecu_14_sites)) |>
join(as.data.frame(st_coordinates(Ecu_14_sites)))
full_sites_14_15_16 <- as.data.frame(st_coordinates(Ecu_14_sites)) |>
rbind(as.data.frame(st_coordinates(Ecu_14_sites)))
# Union all sites
full_sites_14_15_16 <- as.data.frame(st_coordinates(Ecu_14_sites)) |>
rbind(as.data.frame(st_coordinates(Ecu_14_sites)))|>
rbind(as.data.frame(st_coordinates(Ecu_14_sites)))
full_sites_14_15_16
unique(Ecu_14_15_16$site)
full_sites_14_15_16$site <- unique(Ecu_14_15_16$site)
length(unique(Ecu_14_15_16$site))
dim(full_sites_14_15_16)
as.data.frame(st_coordinates(Ecu_14_sites))
as.data.frame(st_coordinates(Ecu_14_sites))[Y]
as.data.frame(st_coordinates(Ecu_14_sites))[,"Y"]
Ecu_14_df$lat <- as.data.frame(st_coordinates(Ecu_14_sites))[,"Y"]
Ecu_14_df
View(Ecu_14_df)
unique(Ecu_14_df$site)
length(unique(Ecu_14_df$site))
Ecu_14_df$lat <- rep(as.data.frame(st_coordinates(Ecu_14_sites))[,"Y"], 30)
rep(as.data.frame(st_coordinates(Ecu_14_sites))[,"Y"], 30)
length(unique(Ecu_14_df$site))
dim(Ecu_14_df)
length(unique(Ecu_14_df$.id))
Ecu_14_df$lat <- rep(as.data.frame(st_coordinates(Ecu_14_sites))[,"Y"], 13)
rep(as.data.frame(st_coordinates(Ecu_14_sites))[,"Y"], 13)
dim(Ecu_14_df)
as.data.frame(st_coordinates(Ecu_14_sites))[,"X"]
# make data frame for each
library (plyr)
Ecu_14_df <- ldply (Ecu_14_historias)
Ecu_14_df$site <- paste("Ecu_14", 1:30, sep="_")
rep(as.data.frame(st_coordinates(Ecu_14_sites))[,"Y"], 13)
as.data.frame(st_coordinates(Ecu_14_sites))[,"X"]
unique(Ecu_14_df$.id)
View(Ecu_14_df)
dimEcu_14_historias[[2]]
dim(Ecu_14_historias[[2]])
dim(Ecu_14_sites)
unique(Ecu_14$Deployment_ID)
unique(Ecu_14$Latitude)
unique(st_coordinates(Ecu_14))
(st_coordinates(Ecu_14))
(unique(Ecu_14$Latitude))
as.data.frame(st_coordinates(Ecu_14_sites))
(unique(Ecu_14$Latitude))
(unique(Ecu_14$Longitude))
as.data.frame(c(unique(Ecu_14$Latitude), (unique(Ecu_14$Longitude))))
as.data.frame(cbind(unique(Ecu_14$Latitude), (unique(Ecu_14$Longitude))))
as.data.frame(cbind(lat=unique(Ecu_14$Latitude), (lon=unique(Ecu_14$Longitude))))
as.data.frame(cbind(
lat=unique(Ecu_14$Latitude),
lon=unique(Ecu_14$Longitude) ))
# Union all sites
full_sites_14_15_16 <- as.data.frame(cbind(
lat=unique(Ecu_14$Latitude),
lon=unique(Ecu_14$Longitude) )) |>
rbind(as.data.frame(cbind(
lat=unique(Ecu_15$Latitude),
lon=unique(Ecu_15$Longitude) )))|>
rbind(as.data.frame(cbind(
lat=unique(Ecu_16$Latitude),
lon=unique(Ecu_16$Longitude) )))
full_sites_14_15_16
j
full_sites_14_15_16$site <- unique(Ecu_14_15_16$site)
# make sf()
full_sites_14_15_16_sf = st_as_sf(full_sites_14_15_16,
coords = c("lon", "lat"),
crs = 4326)
elev <- terra::extract(elevation_14, full_sites_14_15_16_sf)
elev
hbef2015$occ.covs[, 1]
names(hbef2015$occ.covs[, 1])
# estract in AP
full_sites_14_15_16_sf$in_AP = st_intersects(full_sites_14_15_16_sf, AP_Llanganates, sparse = FALSE)
full_sites_14_15_16_sf$in_AP
mapview(full_sites_14_15_16_sf, colour="in_AP")
mapview(full_sites_14_15_16_sf, color="in_AP")
mapview(full_sites_14_15_16_sf, color=in_AP)
names(full_sites_14_15_16_sf)
mapview(full_sites_14_15_16_sf, zcol="in_AP")
full_sites_14_15_16_sf
mapview(full_sites_14_15_16_sf, zcol = "in_AP")
mapview(full_sites_14_15_16_sf, color = "in_AP")
mapview(full_sites_14_15_16_sf, zcol = "in_AP", burst = TRUE)
# make a map
mapview(elevation_14) +
mapview(AP_Llanganates, color = "green", col.regions = "green", alpha = 0.5) +   mapview(Ecu_14_sites, alpha = 0.5, zcol = "in_AP", burst = TRUE) +
mapview(Ecu_15_sites, alpha = 0.5, zcol = "in_AP", burst = TRUE) +
mapview(Ecu_16_sites, alpha = 0.5, zcol = "in_AP", burst = TRUE) +
```
# make a map
mapview(elevation_14) +
mapview(AP_Llanganates, color = "green", col.regions = "green", alpha = 0.5) +   mapview(covs_Ecu_14_sites, alpha = 0.5, zcol = "in_AP", burst = TRUE) +
mapview(covs_Ecu_15_sites, alpha = 0.5, zcol = "in_AP", burst = TRUE) +
mapview(covs_Ecu_16_sites, alpha = 0.5, zcol = "in_AP", burst = TRUE) +
```
covs_Ecu_14_sites
covs_Ecu_14_sites$in_AP
covs_Ecu_14_sites
names9covs_Ecu_14_sites
names(covs_Ecu_14_sites)
mapview(covs_Ecu_14_sites, zcol = "in_AP", burst = TRUE)
# make a map
mapview(elevation_14) +
mapview(AP_Llanganates, color = "green", col.regions = "green", alpha = 0.5) +   mapview(covs_Ecu_14_sites, zcol = "in_AP", burst = TRUE) +
mapview(covs_Ecu_15_sites, zcol = "in_AP", burst = TRUE) +
mapview(covs_Ecu_16_sites, zcol = "in_AP", burst = TRUE) +
```
# make a map
mapview(elevation_14) +
mapview(AP_Llanganates, color = "green", col.regions = "green", alpha = 0.5) +
mapview(covs_Ecu_14_sites, zcol = "in_AP", burst = TRUE) +
mapview(covs_Ecu_15_sites, zcol = "in_AP", burst = TRUE) +
mapview(covs_Ecu_16_sites, zcol = "in_AP", burst = TRUE)
# get sites
Ecu_14_sites <- get.sites("F:/WCS-CameraTrap/data/BDcorregidas/Ecuador/ECU-014.xlsx")
Ecu_15_sites <- get.sites("F:/WCS-CameraTrap/data/BDcorregidas/Ecuador/ECU-015.xlsx")
Ecu_16_sites <- get.sites("F:/WCS-CameraTrap/data/BDcorregidas/Ecuador/ECU-016.xlsx")
# load data
Ecu_14 <- loadproject("F:/WCS-CameraTrap/data/BDcorregidas/Ecuador/ECU-015.xlsx")
source("C:/CodigoR/WCS-CameraTrap/R/organiza_datos_v3.R")
AP_Llanganates <- read_sf("C:/CodigoR/Occu_APs/shp/Llanganates/WDPA_WDOECM_May2025_Public_97512_shp-polygons.shp")
# load data
Ecu_14 <- loadproject("F:/WCS-CameraTrap/data/BDcorregidas/Ecuador/ECU-015.xlsx")
require(readxl)
require(dplyr)
require(tidyr)
project <- read_excel(path_to_file,
sheet = "Project", range = "M1:M2")
cameras <- read_excel(path_to_file,
sheet = "Cameras") |>
rename("Camera_Id"= "Camera id") |>
rename("Year_Purchased"= "Year Purchased")
path_to_file
cameras <- read_excel(path_to_file,
sheet = "Cameras") |>
rename("Camera_Id"= "Camera id") |>
rename("Year_Purchased"= "Year Purchased")
project
cameras <- read_excel(path_to_file,
sheet = "Cameras") |>
rename("Camera_Id"= "Camera id")
dplyr::rename
tidyr::rename
cameras <- read_excel(path_to_file,
sheet = "Cameras") |>
dplyr::rename("Camera_Id"= "Camera id") |>
dplyr::rename("Year_Purchased"= "Year Purchased")
source("C:/CodigoR/WCS-CameraTrap/R/organiza_datos_v3.R")
# load data
Ecu_14 <- loadproject("F:/WCS-CameraTrap/data/BDcorregidas/Ecuador/ECU-015.xlsx")
Ecu_15 <- loadproject("F:/WCS-CameraTrap/data/BDcorregidas/Ecuador/ECU-015.xlsx")
Ecu_16 <- loadproject("F:/WCS-CameraTrap/data/BDcorregidas/Ecuador/ECU-016.xlsx")
# make a map
mapview(elevation_14) +
mapview(AP_Llanganates, color = "green", col.regions = "green", alpha = 0.5) +
mapview(covs_Ecu_14_sites, zcol = "in_AP", burst = TRUE) +
mapview(covs_Ecu_15_sites, zcol = "in_AP", burst = TRUE) +
mapview(covs_Ecu_16_sites, zcol = "in_AP", burst = TRUE)
# get sites
Ecu_14_sites <- get.sites("F:/WCS-CameraTrap/data/BDcorregidas/Ecuador/ECU-014.xlsx")
Ecu_15_sites <- get.sites("F:/WCS-CameraTrap/data/BDcorregidas/Ecuador/ECU-015.xlsx")
path_to_file
require(readxl)
require(dplyr)
require(sf)
project <- read_excel(path_to_file,
sheet = "Project", range = "M1:M2")
##############################
# if Jaguar_Design == yes
##############################
if (project$Jaguar_Design == "yes"){
cameras <- read_excel(path_to_file,
sheet = "Cameras") |>
dplyr::rename("Camera_Id"= "Camera id") |>
dplyr::rename("Year_Purchased"= "Year Purchased")
deployment <- read_excel(path_to_file,
sheet = "Deployment") |> select(!c(ID)) |>
dplyr::rename("Longitude" = "Longitude Resolution") |>
dplyr::rename("Latitude" = "Latitude Resolution") |>
dplyr::rename("start_date" = "Camera Deployment Begin Date") |>
dplyr::rename("end_date" = "Camera Deployment End Date") |>
dplyr::rename("bait"="Bait Description") |>
dplyr::rename("CamType"="Camera Type")  |>
dplyr::rename("Deployment_ID" = "Deployment ID") |>
dplyr::rename("Camera_Id"= "Camera Id")
# extract covs
bait <- deployment |> # can produce error if is a mix
distinct(Point, Longitude, Latitude, bait,
season, rio_playa,	arroyo,	camino,	senda_animal,	senda_gente,	salitral,	pozo_agua,	bosque,	sabana,	intermedio,	intervalo_trigger) |>
# Deployment_ID )|> #, Camera_Id) |>
mutate(Point = as.character(Point))
# add year selecting  the min yr per point
year_purchased <- deployment |> left_join(cameras) #|> # as table
# select("Year_Purchased") |> rename("year_Purchased" = "Year_Purchased")# join first two
# by <- join_by("Camera_Id")
# datatemp <- left_join(deployment, cameras, by) # join by "Deployment ID"
min_yr_purcha_by_pt <-  year_purchased |> group_by(Point) |> summarise(year_purchased=min(Year_Purchased)) |> ungroup()
cam_type1 <-  year_purchased |> group_by(Point) |> summarise(camtype=first(CamType)) |> ungroup()
# count camera models
camtypes <- deployment |> mutate(site=Point) |>
distinct(Point, CamType)
CamTypes <-  as.data.frame(cbind(CamTypes=table(camtypes$Point),  Point=names(table(camtypes$Point))))
CamTypes$Jaguar_Design <- project$Jaguar_Design
a1 <- left_join(bait, CamTypes) |>  # add min year
mutate(across(c(CamTypes), as.factor)) |>
mutate(Point= as.numeric(Point)) # convert Point to numeric to next join
a <- left_join(a1, min_yr_purcha_by_pt) |> left_join(cam_type1)
}# close Jaguar_Design == yes
##############################
# if Jaguar_Design == no
##############################
if (project$Jaguar_Design == "no"){
cameras <- read_excel(path_to_file,
sheet = "Cameras") |>
dplyr::rename("Camera_Id"= "Camera id") |>
dplyr::rename("Year_Purchased"= "Year Purchased")
deployment <- read_excel(path_to_file,
sheet = "Deployment") |> select(!c(ID)) |>
dplyr::rename("Longitude" = "Longitude Resolution") |>
dplyr::rename("Latitude" = "Latitude Resolution") |>
dplyr::rename("start_date" = "Camera Deployment Begin Date") |>
dplyr::rename("end_date" = "Camera Deployment End Date") |>
dplyr::rename("bait"="Bait Description") |>
dplyr::rename("CamType"="Camera Type") |>
dplyr::rename("Deployment_ID" = "Deployment ID") |>
dplyr::rename("Camera_Id"= "Camera Id")
bait <- deployment |> # can produce error if is a mix
distinct(Point, Longitude, Latitude, bait,
season, rio_playa,	arroyo,	camino,	senda_animal,	senda_gente,	salitral,	pozo_agua,	bosque,	sabana,	intermedio,	intervalo_trigger) |>
mutate(Point = as.character(Point))
# add year
# add year selecting  the min yr per point
year_purchased <- deployment |> left_join(cameras) #|> # as table
# select("Year_Purchased") |> rename("year_Purchased" = "Year_Purchased")# join first two
# by <- join_by("Camera_Id")
# datatemp <- left_join(deployment, cameras, by) # join by "Deployment ID"
min_yr_purcha_by_pt <-  year_purchased |> group_by(Point) |> summarise(year_purchased=min(Year_Purchased)) |> ungroup()
cam_type1 <-  year_purchased |> group_by(Point) |> summarise(camtype=first(CamType)) |> ungroup()
# count camera models
camtypes <- deployment |> mutate(site=as.character(Point)) |>
distinct(Point, CamType)
camtypes$Point <- as.character(camtypes$Point)
# add Jaguar design
camtypes$Jaguar_Design <- project$Jaguar_Design
a1 <- left_join(bait, camtypes) |>  # add min year
mutate(across(c(CamType), as.factor)) |>
mutate(Point= as.numeric(Point)) # convert Point to numeric to next join
a <- left_join(a1, min_yr_purcha_by_pt) |> left_join(cam_type1)
}# close Jaguar_Design == no
cameras <- read_excel(path_to_file,
sheet = "Cameras") |>
dplyr::rename("Camera_Id"= "Camera id") |>
dplyr::rename("Year_Purchased"= "Year Purchased")
deployment <- read_excel(path_to_file,
sheet = "Deployment") |> select(!c(ID)) |>
dplyr::rename("Longitude" = "Longitude Resolution") |>
dplyr::rename("Latitude" = "Latitude Resolution") |>
dplyr::rename("start_date" = "Camera Deployment Begin Date") |>
dplyr::rename("end_date" = "Camera Deployment End Date") |>
dplyr::rename("bait"="Bait Description") |>
dplyr::rename("CamType"="Camera Type") |>
dplyr::rename("Deployment_ID" = "Deployment ID") |>
dplyr::rename("Camera_Id"= "Camera Id")
bait <- deployment |> # can produce error if is a mix
distinct(Point, Longitude, Latitude, bait,
season, rio_playa,	arroyo,	camino,	senda_animal,	senda_gente,	salitral,	pozo_agua,	bosque,	sabana,	intermedio,	intervalo_trigger) |>
mutate(Point = as.character(Point))
# add year
# add year selecting  the min yr per point
year_purchased <- deployment |> left_join(cameras) #|> # as table
# select("Year_Purchased") |> rename("year_Purchased" = "Year_Purchased")# join first two
# by <- join_by("Camera_Id")
# datatemp <- left_join(deployment, cameras, by) # join by "Deployment ID"
min_yr_purcha_by_pt <-  year_purchased |> group_by(Point) |> summarise(year_purchased=min(Year_Purchased)) |> ungroup()
cam_type1 <-  year_purchased |> group_by(Point) |> summarise(camtype=first(CamType)) |> ungroup()
# count camera models
camtypes <- deployment |> mutate(site=as.character(Point)) |>
distinct(Point, CamType)
camtypes$Point <- as.character(camtypes$Point)
# add Jaguar design
camtypes$Jaguar_Design <- project$Jaguar_Design
a1 <- left_join(bait, camtypes) |>  # add min year
mutate(across(c(CamType), as.factor)) |>
mutate(Point= as.numeric(Point)) # convert Point to numeric to next join
a <- left_join(a1, min_yr_purcha_by_pt) |> left_join(cam_type1)
a <- left_join(a1, min_yr_purcha_by_pt)
min_yr_purcha_by_pt
a1
# select("Year_Purchased") |> rename("year_Purchased" = "Year_Purchased")# join first two
# by <- join_by("Camera_Id")
# datatemp <- left_join(deployment, cameras, by) # join by "Deployment ID"
min_yr_purcha_by_pt <-  year_purchased |> group_by(Point) |> summarise(year_purchased=min(Year_Purchased)) |> ungroup()
min_yr_purcha_by_pt
year_purchased |> group_by(Point)
year_purchased |> group_by(Point) |> summarise(year_purchased=min(Year_Purchased))
# add year
# add year selecting  the min yr per point
year_purchased <- deployment |> left_join(cameras) #|> # as table
year_purchased
year_purchased |> group_by(Point)
year_purchased |> group_by(Point) |> summarise(year_purchased=min(Year_Purchased)) |> ungroup()
library(grateful)
library(readxl)
library(DT)
library(sf)
library(mapview)
library(maps)
library(tmap)
library(terra)
library(elevatr)
library(spOccupancy)
library(bayesplot)
#library(ggmcmc)
library(tidyverse)
